pip install nvcc4jupyter
%load_ext nvcc4jupyter
%%cuda

#include <bits/stdc++.h>
using namespace std;

__global__ void vectorAdd(int *a , int *b , int *result , int n)
{
    int tid = threadIdx.x + blockIdx.x * blockDim.x;

    if(tid < n)
        result[tid] = a[tid] + b[tid];
}

int main()
{
    int *a, *b, *c;
    int *a_dev, *b_dev, *c_dev;
    int n = 1 << 10;

    a = new int[n];
    b = new int[n];
    c = new int[n];

    int size = n * sizeof(int);

    cudaMalloc(&a_dev, size);
    cudaMalloc(&b_dev, size);
    cudaMalloc(&c_dev, size);

    for(int i = 0; i < n; i++)
    {
        a[i] = 1;
        b[i] = 2;
    }

    cudaMemcpy(a_dev, a, size, cudaMemcpyHostToDevice);
    cudaMemcpy(b_dev, b, size, cudaMemcpyHostToDevice);

    int threads = 1024;
    int blocks = (n + threads - 1) / threads;

    vectorAdd<<<blocks, threads>>>(a_dev, b_dev, c_dev, n);
    cudaMemcpy(c, c_dev, size, cudaMemcpyDeviceToHost);

    cout << "Result of vector Addition" << endl;

    for(int i = 0; i < min(n, 10); i++)
    {
        cout << "c[" << i << "] = " << c[i] << endl;
    }

    cudaFree(a_dev);
    cudaFree(b_dev);
    cudaFree(c_dev);

    delete []a;
    delete []b;
    delete []c;

    return 0;
}
