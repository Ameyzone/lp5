#include <bits/stdc++.h>
#include <omp.h>
using namespace std;
using namespace std::chrono;

class Node{
public:
    int key;
    Node *left;
    Node *right;

    Node(int k){
        key = k;
        left = right = nullptr;
    }
};

// Parallel BFS on a binary tree
void parallelBFS(Node* root) {
    if (root == nullptr)
        return;

    queue<Node*> q;
    q.push(root);

    while (!q.empty()) {
        #pragma omp parallel for
        for (int i = 0; i < q.size(); ++i) {
            Node* node;
            #pragma omp critical
            {
                node = q.front();
                q.pop();
            }
            cout << node->key << " ";

            if (node->left != nullptr)
                #pragma omp critical
                q.push(node->left);
            if (node->right != nullptr)
                #pragma omp critical
                q.push(node->right);
        }
    }
}

int main() {
    Node *root = new Node(10);
    root->left = new Node(20);
    root->right = new Node(30);
    root->left->left = new Node(40);
    root->left->right = new Node(50);

    cout << "Parallel BFS traversal: ";
    auto start = high_resolution_clock::now();
    parallelBFS(root);
    cout << endl;
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<nanoseconds>(stop - start).count() / 1e9;
    cout << "Parallel BFS Execution Time: " << fixed << setprecision(10) << duration << " seconds" << endl;

    return 0;
}
